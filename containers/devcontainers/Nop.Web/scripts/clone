#!/bin/bash

# Git repository cloning utility script
# Usage: clone <repository-url> [target-directory]

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Help function
show_help() {
    echo -e "${BLUE}Git Repository Clone Utility${NC}"
    echo ""
    echo "Usage: clone <repository-url> [target-directory]"
    echo ""
    echo "Examples:"
    echo "  clone https://github.com/user/repo.git"
    echo "  clone https://github.com/user/repo.git my-project"
    echo "  clone git@github.com:user/repo.git"
    echo ""
    echo "Options:"
    echo "  -h, --help    Show this help message"
    echo ""
}

# Check if git is available
if ! command -v git >/dev/null 2>&1; then
    echo -e "${RED}Error: git is not installed or not in PATH${NC}" >&2
    exit 1
fi

# Parse arguments
if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

REPO_URL="$1"
TARGET_DIR="${2:-}"

# Validate repository URL
if [[ ! "$REPO_URL" =~ ^(https?://|git@) ]]; then
    echo -e "${RED}Error: Invalid repository URL format${NC}" >&2
    echo "Repository URL should start with 'https://', 'http://', or 'git@'" >&2
    exit 1
fi

# Extract repository name if no target directory specified
if [ -z "$TARGET_DIR" ]; then
    TARGET_DIR=$(basename "$REPO_URL" .git)
fi

# Check if target directory already exists
if [ -d "$TARGET_DIR" ]; then
    echo -e "${YELLOW}Warning: Directory '$TARGET_DIR' already exists${NC}"
    read -p "Do you want to continue? This will clone into the existing directory. (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Clone operation cancelled${NC}"
        exit 0
    fi
fi

# Clone the repository
echo -e "${BLUE}Cloning repository...${NC}"
echo -e "Repository: ${GREEN}$REPO_URL${NC}"
echo -e "Target: ${GREEN}$TARGET_DIR${NC}"
echo ""

if git clone "$REPO_URL" "$TARGET_DIR"; then
    echo ""
    echo -e "${GREEN}✓ Repository cloned successfully!${NC}"
    echo -e "Directory: ${GREEN}$(cd "$TARGET_DIR" && pwd)${NC}"

    # Show some info about the cloned repository
    cd "$TARGET_DIR"
    echo ""
    echo -e "${BLUE}Repository Information:${NC}"
    echo -e "Branch: ${GREEN}$(git branch --show-current)${NC}"
    echo -e "Remote: ${GREEN}$(git remote get-url origin)${NC}"
    echo -e "Latest commit: ${GREEN}$(git log -1 --pretty=format:'%h - %s (%an, %ar)')${NC}"

    # Check for common files
    echo ""
    echo -e "${BLUE}Project files found:${NC}"
    [ -f "README.md" ] && echo -e "${GREEN}✓${NC} README.md"
    [ -f "package.json" ] && echo -e "${GREEN}✓${NC} package.json"
    [ -f "requirements.txt" ] && echo -e "${GREEN}✓${NC} requirements.txt"
    [ -f "Dockerfile" ] && echo -e "${GREEN}✓${NC} Dockerfile"
    [ -f "docker-compose.yml" ] && echo -e "${GREEN}✓${NC} docker-compose.yml"
    [ -f ".gitignore" ] && echo -e "${GREEN}✓${NC} .gitignore"

else
    echo -e "${RED}✗ Failed to clone repository${NC}" >&2
    exit 1
fi
