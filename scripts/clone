#!/bin/bash

# Function to display help
show_help() {
  cat << EOF
Clone Script - Manage NopCommerce plugin repositories

USAGE:
  clone [OPTIONS] <repo-name>
  clone [OPTIONS] --site <site-name>
  clone --remove [OPTIONS] <repo-name>
  clone --remove --site <site-name>

OPTIONS:
  -h, --help      Show this help message
  -v, --verbose   Enable verbose output
  -rm, --remove   Remove repository instead of cloning
  -s, --site      Clone/remove all repositories for a specific site

EXAMPLES:
  clone MyPlugin                    # Clone a single plugin
  clone --verbose MyPlugin          # Clone with verbose output
  clone --remove MyPlugin           # Remove a plugin
  clone --site MySite               # Clone all plugins for a site
  clone --remove --site MySite      # Remove all plugins for a site

DESCRIPTION:
  This script manages NopCommerce plugin repositories by cloning them from
  Azure DevOps and adding them to the solution. It automatically finds the
  solution file and creates the appropriate directory structure.

  For site operations, the script reads from PluginList.txt files located at:
  .devcontainer/sites/<site-name>/PluginList.txt
EOF
}

# Check for help option first
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  exit 0
fi

# Enable verbose mode if --verbose or -v is passed
VERBOSE=false
if [[ "$1" == "--verbose" || "$1" == "-v" ]]; then
  VERBOSE=true
  shift
fi

# Function to echo messages in verbose mode
log() {
  if [ "$VERBOSE" = true ]; then
    echo "[DEBUG] $1"
  fi
}

log "Starting clone script"

# Check if a repository name argument is provided
if [ -z "$1" ]; then
  echo "Usage: clone [--verbose | -v] [--remove | -rm] [--site | -s] <repo-name>"
  exit 1
fi

# Suggest correct usage if the user types `-r` instead of `-rm`
if [[ "$1" == "-r" ]]; then
  echo "Error: Invalid option '-r'. Did you mean 'clone -rm <repo-name>'?"
  exit 1
fi

# Check for verbose and remove options without arguments
if [[ "$1" == "--verbose" || "$1" == "-v" ]] && [ -z "$2" ]; then
  echo "Error: The --verbose or -v option must be followed by a repository name or action."
  echo "Usage: clone [--verbose | -v] [--remove | -rm] [--site | -s] <repo-name>"
  exit 1
fi

if [[ "$1" == "--remove" || "$1" == "-rm" ]] && [ -z "$2" ]; then
  echo "Usage: clone [--verbose | -v] [--remove | -rm] [--site | -s] <repo-name>"
  exit 1
fi

# Variables
ACTION=$1
REPO_NAME=$2
if [[ "$ACTION" != "--remove" && "$ACTION" != "-rm" ]]; then
  REPO_NAME=$1
fi
REPO_SLUG="Nop.Plugin.Opensoft.$REPO_NAME"
DEVOPS_PROJECT="FarHeapSolutions@vs-ssh.visualstudio.com:v3/FarHeapSolutions/Nop%20Plugins"

# Get current directory
CURRENT_DIR=$(pwd)
log "Current directory: $CURRENT_DIR"

# Search for solution files
SOLUTION_COUNT=0
declare -a SOLUTION_LIST
CHOSEN_SOLUTION=""

# Function to search down directories
search_down() {
  local search_path="$1"
  local depth="$2"

  if [ "$depth" -ge 3 ]; then
    return
  fi

  log "Searching down in: $search_path (depth $depth)"

  # Check for .sln files in current directory
  for sln_file in "$search_path"/*.sln; do
    if [ -f "$sln_file" ]; then
      SOLUTION_LIST+=("$sln_file")
      ((SOLUTION_COUNT++))
      log "Found solution: $sln_file"
    fi
  done

  # Search subdirectories
  local next_depth=$((depth + 1))
  for dir in "$search_path"/*/; do
    if [ -d "$dir" ]; then
      search_down "$dir" "$next_depth"
    fi
  done
}

# Search up the directory tree
SEARCH_DIR="$CURRENT_DIR"
while true; do
  log "Searching up in: $SEARCH_DIR"

  # Check for .sln files in current search directory
  for sln_file in "$SEARCH_DIR"/*.sln; do
    if [ -f "$sln_file" ]; then
      SOLUTION_LIST+=("$sln_file")
      ((SOLUTION_COUNT++))
      log "Found solution: $sln_file"
    fi
  done

  # Check if we've reached nopSetup or workspace folder
  DIR_NAME=$(basename "$SEARCH_DIR")
  if [[ "${DIR_NAME,,}" == "nopsetup" || "${DIR_NAME,,}" == "workspace" ]]; then
    log "Reached stop directory: $DIR_NAME"
    break
  fi

  # Move up one directory
  PARENT_DIR=$(dirname "$SEARCH_DIR")
  if [ "$SEARCH_DIR" == "$PARENT_DIR" ] || [ "$PARENT_DIR" == "/" ]; then
    log "Reached filesystem root"
    break
  fi
  SEARCH_DIR="$PARENT_DIR"
done

# If no solutions found going up, search down 3 levels
if [ "$SOLUTION_COUNT" -eq 0 ]; then
  log "No solutions found going up, searching down 3 levels"
  search_down "$CURRENT_DIR" 0
fi

# Handle solution selection
if [ "$SOLUTION_COUNT" -eq 0 ]; then
  echo "No solution file found"
  exit 1
elif [ "$SOLUTION_COUNT" -eq 1 ]; then
  CHOSEN_SOLUTION="${SOLUTION_LIST[0]}"
  log "Using single solution: $CHOSEN_SOLUTION"
else
  echo "Multiple solution files found:"
  for i in "${!SOLUTION_LIST[@]}"; do
    echo "$((i+1)). ${SOLUTION_LIST[$i]}"
  done
  read -p "Please choose a solution file (1-$SOLUTION_COUNT): " CHOICE
  if [[ "$CHOICE" =~ ^[0-9]+$ ]] && [ "$CHOICE" -ge 1 ] && [ "$CHOICE" -le "$SOLUTION_COUNT" ]; then
    CHOSEN_SOLUTION="${SOLUTION_LIST[$((CHOICE-1))]}"
  else
    echo "Invalid selection"
    exit 1
  fi
fi

# Get solution directory
SOLUTION_DIR=$(dirname "$CHOSEN_SOLUTION")
log "Solution directory: $SOLUTION_DIR"

# Validate solution file for Plugins folder declaration
log "Validating solution file for Plugins folder"
if ! grep -q 'Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Plugins"' "$CHOSEN_SOLUTION"; then
  echo "Error: No plugins solution folder declaration in solution file"
  exit 1
fi

log "Plugins folder declaration found with correct GUID"

# Check if Plugins folder exists
if [ ! -d "$SOLUTION_DIR/Plugins" ]; then
  echo "Error: Plugins folder not where expected"
  exit 1
fi

PLUGINS_DIR="$SOLUTION_DIR/Plugins"
CLONE_DIR="$PLUGINS_DIR/$REPO_SLUG"
log "Plugins directory: $PLUGINS_DIR"
log "Clone directory: $CLONE_DIR"

# Handle removal
if [[ "$ACTION" == "--remove" || "$ACTION" == "-rm" ]]; then
  echo "Removing repository '$REPO_SLUG'..."

  if [ -d "$CLONE_DIR" ]; then
    rm -rf "$CLONE_DIR"
    echo "Folder '$CLONE_DIR' removed successfully."
  else
    echo "Folder '$CLONE_DIR' does not exist."
  fi

  # Remove from solution
  cd "$SOLUTION_DIR" || exit 1
  dotnet sln "$CHOSEN_SOLUTION" remove "Plugins/$REPO_SLUG/$REPO_SLUG.csproj" 2>/dev/null
  echo "Project '$REPO_SLUG' removed from solution."

  cd "$CURRENT_DIR"
  echo "Repository '$REPO_SLUG' removed successfully."
  exit 0
fi

# Handle site operations
if [[ "$1" == "--site" || "$1" == "-s" ]]; then
  if [ -z "$2" ]; then
    echo "Error: The --site or -s option must be followed by a site name."
    echo "Usage: clone --site <site-name>"
    exit 1
  fi

  SITE_NAME=$2
  PLUGIN_LIST_FILE="$SOLUTION_DIR/.devcontainer/sites/$SITE_NAME/PluginList.txt"

  if [ ! -f "$PLUGIN_LIST_FILE" ]; then
    echo "Error: PluginList.txt file not found at '$PLUGIN_LIST_FILE'."
    exit 1
  fi

  echo "Cloning repositories for site '$SITE_NAME' listed in $PLUGIN_LIST_FILE..."

  while IFS= read -r REPO_NAME_FROM_FILE || [ -n "$REPO_NAME_FROM_FILE" ]; do
    if [[ -z "$REPO_NAME_FROM_FILE" || "$REPO_NAME_FROM_FILE" == \#* ]]; then
      continue
    fi

    CURRENT_REPO_SLUG="Nop.Plugin.Opensoft.$REPO_NAME_FROM_FILE"
    CURRENT_CLONE_DIR="$PLUGINS_DIR/$CURRENT_REPO_SLUG"

    echo "--- Processing $REPO_NAME_FROM_FILE ---"

    git clone "$DEVOPS_PROJECT/$CURRENT_REPO_SLUG" "$CURRENT_CLONE_DIR"
    if [ $? -ne 0 ]; then echo "Error cloning $CURRENT_REPO_SLUG. Skipping."; continue; fi

    cd "$CURRENT_CLONE_DIR" || { echo "Error cd'ing to $CURRENT_CLONE_DIR. Skipping."; continue; }
    git checkout 4.80/develop
    if [ $? -ne 0 ]; then echo "Error checking out branch for $CURRENT_REPO_SLUG. Skipping."; continue; fi

    cd "$SOLUTION_DIR" || exit 1
    if [ -f "Plugins/$CURRENT_REPO_SLUG/$CURRENT_REPO_SLUG.csproj" ]; then
      dotnet sln "$CHOSEN_SOLUTION" add --solution-folder Plugins "Plugins/$CURRENT_REPO_SLUG/$CURRENT_REPO_SLUG.csproj"
    fi
    echo "--- Finished $REPO_NAME_FROM_FILE ---"
  done < "$PLUGIN_LIST_FILE"

  echo "All repositories for site '$SITE_NAME' processed."
  exit 0
fi

if [[ "$1" == "--remove" || "$1" == "-rm" ]] && [[ "$2" == "--site" || "$2" == "-s" ]]; then
  if [ -z "$3" ]; then
    echo "Error: The --site or -s option must be followed by a site name."
    echo "Usage: clone -rm --site <site-name>"
    exit 1
  fi

  SITE_NAME=$3
  PLUGIN_LIST_FILE="$SOLUTION_DIR/.devcontainer/sites/$SITE_NAME/PluginList.txt"

  if [ ! -f "$PLUGIN_LIST_FILE" ]; then
    echo "Error: PluginList.txt file not found at '$PLUGIN_LIST_FILE'."
    exit 1
  fi

  echo "Removing repositories for site '$SITE_NAME' listed in $PLUGIN_LIST_FILE..."

  while IFS= read -r REPO_NAME_FROM_FILE || [ -n "$REPO_NAME_FROM_FILE" ]; do
    if [[ -z "$REPO_NAME_FROM_FILE" || "$REPO_NAME_FROM_FILE" == \#* ]]; then
      continue
    fi

    CURRENT_REPO_SLUG="Nop.Plugin.Opensoft.$REPO_NAME_FROM_FILE"
    CURRENT_CLONE_DIR="$PLUGINS_DIR/$CURRENT_REPO_SLUG"

    echo "--- Removing $REPO_NAME_FROM_FILE ---"

    if [ -d "$CURRENT_CLONE_DIR" ]; then
      rm -rf "$CURRENT_CLONE_DIR"
      echo "Folder '$CURRENT_CLONE_DIR' removed."
    fi

    cd "$SOLUTION_DIR" || exit 1
    dotnet sln "$CHOSEN_SOLUTION" remove "Plugins/$CURRENT_REPO_SLUG/$CURRENT_REPO_SLUG.csproj" 2>/dev/null

    echo "--- Finished removing $REPO_NAME_FROM_FILE ---"
  done < "$PLUGIN_LIST_FILE"

  echo "All repositories for site '$SITE_NAME' have been removed."
  exit 0
fi

# Clone the repository
echo "Cloning repository '$REPO_SLUG'..."
git clone "$DEVOPS_PROJECT/$REPO_SLUG" "$CLONE_DIR"
if [ $? -ne 0 ]; then
  echo "Error: Failed to clone repository '$REPO_SLUG'"
  exit 1
fi

echo "Repository '$REPO_SLUG' cloned successfully."

# Change to the cloned directory and switch branch
cd "$CLONE_DIR" || exit 1
git checkout 4.80/develop
if [ $? -ne 0 ]; then
  echo "Error: Failed to switch to branch '4.80/develop'"
  cd "$CURRENT_DIR"
  exit 1
fi

# Add project to solution
cd "$SOLUTION_DIR" || exit 1
dotnet sln "$CHOSEN_SOLUTION" add --solution-folder Plugins "Plugins/$REPO_SLUG/$REPO_SLUG.csproj"

if [ $? -ne 0 ]; then
  echo "Error: Failed to add project to solution"
else
  echo "Project '$REPO_SLUG' added to solution successfully."
fi

cd "$CURRENT_DIR"
echo "Script completed successfully."
